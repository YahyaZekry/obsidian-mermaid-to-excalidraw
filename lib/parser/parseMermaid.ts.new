import mermaid, { MermaidConfig } from "mermaid";
import { GraphImage, Flowchart, Sequence, Class } from "../interfaces";
import { MERMAID_CONFIG } from "../constants";
import { encodeEntities, decodeEntities } from "../utils";

// Fallback to Svg
const convertSvgToGraphImage = (svgContainer: HTMLDivElement) => {
  // Extract SVG width and height
  const svgEl = svgContainer.querySelector("svg");
  if (!svgEl) {
    throw new Error("SVG element not found");
  }
  const rect = svgEl.getBoundingClientRect();
  const width = rect.width;
  const height = rect.height;

  // Set width and height explicitly since in firefox it gets set to 0
  // if the width and height are not explicitly set
  svgEl.setAttribute("width", `${width}`);
  svgEl.setAttribute("height", `${height}`);

  // Convert SVG to image
  const mimeType = "image/svg+xml";
  const decoded = unescape(encodeURIComponent(svgEl.outerHTML));
  const base64 = btoa(decoded);
  const dataURL = `data:image/svg+xml;base64,${base64}`;

  const graphImage: GraphImage = {
    type: "graphImage",
    mimeType,
    dataURL,
    width,
    height,
  };

  return graphImage;
};

export const parseMermaid = async (
  definition: string,
  config: MermaidConfig = MERMAID_CONFIG
): Promise<Flowchart | GraphImage | Sequence | Class> => {
  mermaid.initialize({ ...MERMAID_CONFIG, ...config });
  
  try {
    // Create temporary container for rendering
    const container = document.createElement("div");
    container.style.visibility = "hidden";
    container.style.position = "absolute";
    container.style.left = "-9999px";
    document.body.appendChild(container);
    
    // Parse the diagram
    const { svg, bindFunctions } = await mermaid.render('mermaid-diagram', definition, container);
    container.innerHTML = svg;
    if (bindFunctions) bindFunctions(container);
    
    // Try to determine diagram type
    if (definition.includes("flowchart") || definition.includes("graph ")) {
      // Simple mock implementation for flowchart (you'd need to implement proper parsing)
      const mockFlowchart: Flowchart = {
        type: "flowchart",
        vertices: [],
        edges: [],
        direction: "TD"
      };
      document.body.removeChild(container);
      return mockFlowchart;
    } else if (definition.includes("sequenceDiagram")) {
      // Simple mock implementation for sequence diagram
      const mockSequence: Sequence = {
        type: "sequence",
        actors: [],
        messages: []
      };
      document.body.removeChild(container);
      return mockSequence;
    } else if (definition.includes("classDiagram")) {
      // Simple mock implementation for class diagram
      const mockClass: Class = {
        type: "class",
        classes: [],
        relations: []
      };
      document.body.removeChild(container);
      return mockClass;
    } else {
      // Fallback to SVG if diagram type is unknown or not supported for conversion
      const graphImage = convertSvgToGraphImage(container);
      document.body.removeChild(container);
      return graphImage;
    }
  } catch (error) {
    console.error("Error parsing Mermaid diagram:", error);
    throw error;
  }
};
